#!/usr/bin/env bash
#
# usage: onemanga [-hwdlorz7tgbps] [ -f <log filename> ] [-c <first chapter>[+|-<last chapter>]] <manga name> [<manga name> ...]
# Use r for rar archive, z for zip archive, 7 for 7zip archive, t for tar archive, g for tar.gz archive, b for tar.bz2 archive

trap cleanup 0

MAIN_SITE="http://www.onemanga.com"
ALT_SITE="http://www.1000manga.com"

base_url="$MAIN_SITE"
search_url="$base_url/directory"
base_dir=`pwd`
log="$base_dir/onemanga.log"
cookies="$base_dir/tmp_cookies"

CLEAREOL="`tput el`"

R='\e[0;31m'
G='\e[0;32m'
Y='\e[0;33m'
B='\e[0;34m'
M='\e[0;35m'
C='\e[0;36m'
N='\e[0m'
T='\t'

function calc() {
   echo "scale=2; $*" | bc -q 2>/dev/null | cut -f1 -d.
}

function echoes() {
   if [[ $2 -gt 0 ]]; then
      eval "for i in {${3:-1}..$2}; do echo -n '$1'; done"
   fi
}

function progressbar() {
   width=20
   current=$1
   total=$2
   
   percent=`calc "$current / $total * 100"`
   stack=`calc "$current / $total * $width"`
   stack=${stack:=0}
   space=`calc "$width - $stack"`
   
   echoes " " ${#percent} 3
   echo -n "$percent% ["
   echoes "#" $stack
   echoes " " $space
   echo "]"
}

function help() {
   echo -e "\n${Y}onemanga  - One Manga Downloader (shell script)${N}"
   echo -e "${Y}Original Author: Suksit (http://www.suksit.com)${N}"
   echo -e "${Y}Forked by: Yumi Nanako (yuminanako@yuminanako.info) and Leroy Lim (leroylim@yuminanako.info)${N}"
   echo -e "${Y}License: Undecided yet, need to ask the original author.${N}\n"
   echo -e "${G}Usage:${N}\n${T}${0} [-hwdlorz7tgbs] [ -f <log filename> ] [-c <first chapter>[+|-<last chapter>]] <manga name> [<manga name> ...]\n"
   echo -e "${G}Options:${N}"
   echo -e "${T}h${T}Help mode, to view this help message"
   echo -e "${T}w${T}Used by OMWEB only for no colours output"
   echo -e "${T}d${T}Download the manga to their own directory named as the manga title"
   echo -e "${T}l${T}Download only the latest chapter of the manga"
   echo -e "${T}o${T}Enable logging to onemanga.log"
   echo -e "${T}r${T}Download manga in cbr (rar) - Default if none specified"
   echo -e "${T}z${T}Download manga in cbz (zip)"
   echo -e "${T}7${T}Download manga in cb7 (7zip)"
   echo -e "${T}t${T}Download manga in cbt (tar)"
   echo -e "${T}g${T}Download manga in tar.gz (gzip)"
   echo -e "${T}b${T}Download manga in tar.bz2 (bzip2)"
   echo -e "${T}p${T}Check for prerequisites needed to run ${0}"
   echo -e "${T}s${T}Search for OneManga for defined manga keyword"
   echo -e "${T}f${T}Specify a custom filename to log to, same with o except with custom log filename"
   echo -e "${T}c${T}Specify chapter of manga to download, etc -c 1-52 for Chapters 1 to 52"
   exit
}

function checkprereqs() {
   CMDS="awk grep sed bc md5sum wget rar zip 7z tar gzip bzip2"
   echo -e "${G}Checking for prerequisites:${N}"
   for i in $CMDS
   do
      type -P $i &>/dev/null  && echo -e "${i}${T}-${T}Command Found${T}${G}[OK]${N}" && continue  || { echo -e "${i}${T}-${T}Command Unfound${T}${R}[ERROR]${N}"; }
   done
}

function cleanup() {
   rm -f *.jpg tmp_* $cookies
}

if [[ $# -eq 0 ]]; then
   help
   exit
fi

while getopts ":c:f:hwdlorz7tgbps:" op; do
   case $op in
      c)
         CHAPTER=1
         CHAPTER_ARG="$OPTARG"
      ;;
      f)
         LOG_FILE=1
         log="$base_dir/$OPTARG"
      ;;
      h)
         HELP=1
      ;;
      w)
         R=""
         G=""
         Y=""
         B=""
         M=""
         C=""
         N=""
      ;;
      d)
         USE_DIR=1
      ;;
      l)
         LATEST=1
      ;;
      o)
         LOG_FILE=1
      ;;
      r)
         RAR_FILE=1
      ;;
      z)
         ZIP_FILE=1
      ;;
      7)
         SEVENZIP_FILE=1
      ;;
      t)
         TAR_FILE=1
      ;;
      g)
         TARGZ_FILE=1
      ;;
      b)
         TARBZTWO_FILE=1
      ;;
      p)
         CHECKPREREQS=1
      ;;
      s)
         SEARCH=1
         KEYWORD="$OPTARG"
      ;;
      \?)
         echo -e "${R}Unknown option:${N} -$OPTARG" >&2
         help
         exit 1
      ;;
      :)
         case $OPTARG in
            c)
               echo "Please specify a chapter number"
            ;;
            f)
               echo "Please specify a logfile name"
            ;;
            s)
               echo "Please specify a search keyword"
            ;;
         esac
         exit 1
      ;;
   esac
done

shift $(($OPTIND - 1))

if [[ $HELP -eq 1 ]]; then
   help
   exit
fi

if [[ $CHECKPREREQS -eq 1 ]]; then
   checkprereqs
   exit
fi

if [[ $CHAPTER -eq 1 && $LATEST -eq 1 ]]; then
   echo "Invalid option: -c and -l cannot be used at the same time" >&2
   exit 1
fi

if [[ $SEARCH ]]; then
   echo -e "\nSearching ${search_url}...\n"
   wget -qO - "${search_url}/" | grep "ch-subject" | sed -e 's@^.*href\=\"/@\(@g' -e 's@</a>.*@@g' -e 's@/.*>@\):@g' | awk -F: '{print $2 "\t" $1}' | sed "s/\&\#39\;/'/g" | grep -i "$KEYWORD" > tmp_search
   [[ -s tmp_search ]] && cat tmp_search && echo ""
   result=`cat tmp_search | wc -l`
   echo -n "${result}" && [[ $result -gt 1 ]] && echo " results." || echo " result."
   exit
fi

if [[ $CHAPTER = "" && $LATEST = "" ]]; then
   UPDATE=1
fi

if [[ $CHAPTER -eq 1 ]]; then
   if [[ "${CHAPTER_ARG%+*}" != "$CHAPTER_ARG" ]]; then
      first_chapter=${CHAPTER_ARG%+*}
      last_chapter="+"
      elif [[ "${CHAPTER_ARG%-*}" != "$CHAPTER_ARG" ]]; then
      first_chapter=${CHAPTER_ARG%-*}
      last_chapter=${CHAPTER_ARG#*-}
   else
      first_chapter=$CHAPTER_ARG
      last_chapter=$CHAPTER_ARG
   fi
fi

for manga_name in "$@"; do
   manga_name=${manga_name%/}
   
   # field index for onemanga.com HTML page
   page_index=2
   image_index=4
   
   if [[ $USE_DIR -eq 1 ]]; then
      if [[ -f "$base_dir/$manga_name" ]]; then
         #echo -e "\n$manga_name ${Y}[SKIPPED]${N}"
         #echo "Not a directory."
         continue
      fi
      
      mkdir -p "$base_dir/$manga_name"
      cd "$base_dir/$manga_name"
   fi
   
   display_name=`echo $manga_name | sed -e "s/_/ /g" -e "s/%27/'/g"`
   word_count=`echo $display_name | wc -w`
   sort_key=$((word_count + 1))
   local_chapter=`ls ${manga_name}_*.cb? 2> /dev/null | sort -r -n -k $sort_key -t_ | head -n1`
   local_chapter=${local_chapter##*_}
   local_chapter=${local_chapter%.*}
   
   if [[ -n $local_chapter ]]; then
      if [[ `echo "$local_chapter == 0" | bc` -eq 0 ]]; then
         local_chapter=`echo $local_chapter | sed "s/^0*//g"`
      fi
   else
      local_chapter="none"
   fi
   
   echo -ne "\nOpening $base_url/$manga_name..."
   wget -O tmp_index --no-cache $base_url/$manga_name/ 2>tmp_status
   
   if [[ ! -s "tmp_index" ]]; then
      if [[ `grep "ERROR 404: Not Found" tmp_status | wc -l` -gt 0 ]]; then
         echo -e "\b\b\b ${R}[ERROR]${N}\nPlease make sure the manga name is correct."
      elif [[ `grep "unable to resolve host address" tmp_status | wc -l` -gt 0 ]]; then
         echo -e "\b\b\b ${R}[ERROR]${N}\nPlease check your internet connection."
      fi
      exit
   fi
   
   grep "ch-subject" tmp_index 2> /dev/null | grep "a href" | cut -f3 -d\/ > tmp_chapters
   
   if [[ ! -s tmp_chapters ]]; then
      echo -e "\b\b\b ${R}[ERROR]${N}\nCannot extract chapter list from the specified URL."
      continue
   fi
   
   echo -e "\b\b\b ${G}[OK]${N}"
   
   latest_chapter=`head -1 tmp_chapters`
   
   if [[ -n $local_chapter && ! $CHAPTER -eq 1 ]]; then
      echo "Local chapter: ${local_chapter} / Latest chapter: $latest_chapter"
      
      if [[ $local_chapter == $latest_chapter ]]; then
         echo "No update."
         cleanup
         continue
      fi
   fi
   
   if [[ $LATEST -eq 1 ]]; then
      first_chapter=$latest_chapter
      last_chapter=$latest_chapter
   fi
   
   if [[ "$last_chapter" == "+" ]]; then
      last_chapter=$latest_chapter
   fi
   
   if [[ $UPDATE -eq 1 ]]; then
      if [[ $local_chapter == "" ]]; then
         first_chapter=`sort -n tmp_chapters | head -n1`
      else
         index=`sort -n tmp_chapters | grep -nm1 $local_chapter | cut -f1 -d:`
         first_chapter=`sort -n tmp_chapters | tail -n+$((index + 1)) | head -n1`
      fi
      
      last_chapter=$latest_chapter
   fi
   
   if [[ $CHAPTER -eq 1 || -z $local_chapter ]]; then
      echo "From chapter: $first_chapter / To chapter: $last_chapter"
   fi
   
   index=`sort -n tmp_chapters | grep -nm1 $first_chapter | cut -f1 -d:`
   last_index=`sort -n tmp_chapters | grep -nm1 $last_chapter | cut -f1 -d:`
   
   CHAPTERS=`sort -n tmp_chapters | awk 'FNR >= '$index' && FNR <= '$last_index`
   
   for chapter in $CHAPTERS; do
      base_url="$MAIN_SITE"
      COOKIE=""
      
      echo "Downloading $display_name chapter $chapter"
      if [[ $LOG_FILE -eq 1 ]]; then
         echo "Logging to: ${log}"
      fi
      echo -ne "\r$CLEAREOL`progressbar 0 1` (Initializing...)"
      
      ##
      # BEGIN support for series that are hosted on 1000manga.com
      ##
      redirected=`wget -qO - $base_url/$manga_name/$chapter/ | grep -i "read this series at 1000manga.com" | wc -l`
      
      if [[ $redirected -eq 1 ]]; then
         echo -ne "\r$CLEAREOL`progressbar 0 1` (Redirecting to 1000manga.com...)"
         base_url="$ALT_SITE"
         echo -e "www.1000manga.com\tFALSE\t/\tFALSE\t0\tage_verified\t30" > $cookies
         
         # field index for 1000manga.com HTML page
         page_index=4
         image_index=10
         
         COOKIE="--load-cookies=$cookies"
      fi
      ##
      # END 1000manga.com
      ##
      
      page_location=`wget $COOKIE -qO - $base_url/$manga_name/$chapter/ | grep -i "begin reading" | cut -f${page_index} -d\"`
      wget $COOKIE -qO - $base_url$page_location | sed '/id="id_page_select"/,/\/select/ s/\<option value=/\
      \<option value=/g' > tmp_page
      PAGES=`sed -n '/id="id_page_select"/,/\/select/ p' < tmp_page | grep -i "option value" | cut -f2 -d\"`
      image_location=`grep -i "manga-page" tmp_page | cut -f${image_index} -d\"`
      image_location=${image_location%/*.jpg}
      
      total=`echo $PAGES | wc -w`
      i=0
      
      for page in $PAGES; do
         let i++
         echo -ne "\r$CLEAREOL`progressbar $i $total` ($i/$total)"
         wget --load-cookies=$cookies -q "$image_location/$page.jpg"
      done
      
      int_part=${chapter%\.*}
      if [[ `echo "$int_part == 0" | bc` -eq 0 && ${#int_part} -lt 3 ]]; then
         chapter=`echoes "0" ${#int_part} 2`$chapter
      fi
      
      if [[ $RAR_FILE -eq 0 && $ZIP_FILE -eq 0 && $SEVENZIP_FILE -eq 0 && $TAR_FILE -eq 0 ]]; then
         RAR_FILE=1
      fi
      
      if [[ $RAR_FILE -eq 1 ]]; then
         echo -ne "\r$CLEAREOL`progressbar $i $total` (packing files...)"
         archive_name="${manga_name}_${chapter}.cbr"
         if rar a -inul -m5 $archive_name '*.jpg'; then
            echo -e "\r$CLEAREOL`progressbar $i $total` ($archive_name)"
            [[ $LOG_FILE -eq 1 ]] && echo "[`date +%c`] [`md5sum $archive_name | awk '{print $1}'`] $archive_name" >> "$log"
         fi
      fi
      
      if [[ $ZIP_FILE -eq 1 ]]; then
         echo -ne "\r$CLEAREOL`progressbar $i $total` (packing files...)"
         archive_name="${manga_name}_${chapter}.cbz"
         if zip -q -9 $archive_name *.jpg; then
            echo -e "\r$CLEAREOL`progressbar $i $total` ($archive_name)"
            [[ $LOG_FILE -eq 1 ]] && echo "[`date +%c`] [`md5sum $archive_name | awk '{print $1}'`] $archive_name" >> "$log"
         fi
      fi
      
      if [[ $SEVENZIP_FILE -eq 1 ]]; then
         echo -ne "\r$CLEAREOL`progressbar $i $total` (packing files...)"
         archive_name="${manga_name}_${chapter}.cb7"
         if 7z a -mx9 $archive_name *.jpg > /dev/null 2>&1; then
            echo -e "\r$CLEAREOL`progressbar $i $total` ($archive_name)"
            [[ $LOG_FILE -eq 1 ]] && echo "[`date +%c`] [`md5sum $archive_name | awk '{print $1}'`] $archive_name" >> "$log"
         fi
      fi
      
      if [[ $TAR_FILE -eq 1 ]]; then
         echo -ne "\r$CLEAREOL`progressbar $i $total` (packing files...)"
         archive_name="${manga_name}_${chapter}.cbt"
         if tar cf $archive_name *.jpg; then
            echo -e "\r$CLEAREOL`progressbar $i $total` ($archive_name)"
            [[ $LOG_FILE -eq 1 ]] && echo "[`date +%c`] [`md5sum $archive_name | awk '{print $1}'`] $archive_name" >> "$log"
         fi
      fi
      
      if [[ $TARGZ_FILE -eq 1 ]]; then
         echo -ne "\r$CLEAREOL`progressbar $i $total` (packing files...)"
         GZIP=--best
         archive_name="${manga_name}_${chapter}.tar.gz"
         if tar cfz $archive_name *.jpg; then
            echo -e "\r$CLEAREOL`progressbar $i $total` ($archive_name)"
            [[ $LOG_FILE -eq 1 ]] && echo "[`date +%c`] [`md5sum $archive_name | awk '{print $1}'`] $archive_name" >> "$log"
         fi
      fi
      
      if [[ $TARBZTWO_FILE -eq 1 ]]; then
         echo -ne "\r$CLEAREOL`progressbar $i $total` (packing files...)"
         BZIP2=--best
         archive_name="${manga_name}_${chapter}.tar.bz2"
         if tar cfj $archive_name *.jpg; then
            echo -e "\r$CLEAREOL`progressbar $i $total` ($archive_name)"
            [[ $LOG_FILE -eq 1 ]] && echo "[`date +%c`] [`md5sum $archive_name | awk '{print $1}'`] $archive_name" >> "$log"
         fi
      fi
   done
done
